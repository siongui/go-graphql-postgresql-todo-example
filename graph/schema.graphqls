# GraphQL schema example
#
# https://gqlgen.com/getting-started/

"""
DateTime must be valid RFC3339 format
https://pkg.go.dev/time#pkg-constants
"""
scalar DateTime

"TodoStatus represents the status of Todo item"
enum TodoStatus {
    "status active"
    Active

    "status inactive"
    Inactive
}

"Todo represents one todo item"
type Todo {
    id: String!
    content_code: String!
    content_name: String
    description: String
    start_date: DateTime
    end_date: DateTime
    status: TodoStatus
    created_by: String
    created_date: DateTime!
    updated_by: String
    updated_date: DateTime!
}

"CreateTodoInput is used to create todo item"
input CreateTodoInput {
    content_code: String!
    content_name: String!
    description: String!
    start_date: DateTime!
    end_date: DateTime!
    status: TodoStatus!
}

"UpdateTodoInput is used to update todo item"
input UpdateTodoInput {
    content_code: String
    content_name: String
    description: String
    start_date: DateTime
    end_date: DateTime
    status: TodoStatus
}

"TodoSearchInput is used to search todo items in database"
input TodoSearchInput {
    content_code: String
    content_name: String
    start_date: DateTime
    end_date: DateTime
    status: TodoStatus
}

"PaginationInput ...(desciption to be added)"
input PaginationInput {
    count: Int! = 10
    page: Int! = 1
}

"TodoPagination is paginated todo items"
type TodoPagination {
    PaginationInfo: PaginationInfo!
    Todos: [Todo!]!
}

"PaginationInfo represents pagination information"
type PaginationInfo {
    total_count: Int!
    current_page: Int!
    total_pages: Int!
}

"Query request"
type Query {
    "Find todo by id"
    getTodo(
        "id of the record"
        id: String!
    ): Todo

    "Offset based pagination of todo list"
    TodoPages(
        "pagination input"
        paginationInput: PaginationInput! = {count: 10, page: 1}
    ): TodoPagination!

    TodoSearch(
        "search filters"
        input: TodoSearchInput!,

        "pagination input"
        paginationInput: PaginationInput! = {count: 10, page: 1}
    ): TodoPagination!
}

"Mutation request"
type Mutation {
    "Create a new todo"
    createTodo(
        "input for creating todo item"
        input: CreateTodoInput!
    ): Todo

    "Update existing todo"
    updateTodo(
        "id of the record"
        id: String!,

        "input for updating todo item"
        input: UpdateTodoInput!
    ): Todo
}
